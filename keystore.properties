storePassword=myStorePassword
keyPassword=mykeyPassword
keyAlias=myKeyAlias
storeFile=/keystore/FoodOnMyMind.jks

#notes on the whole signing config process (what I know thus far)
#to get things to work and using gradle:
#1.) in the gradle app build file put:
#
#def keystorePropertiesFile = rootProject.file("keystore.properties")
#def keystoreProperties = new Properties()
#keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

#see this gradle app build file for more comments on the above code
#2.) Then I need to put a signingConfigs block in the gradle build app file (see this gradle build
#again for that) this is where I tell gradle what all the necessary values for each of the necessary
#things are for a signed APK (ie the 4 things listed above).
#3.) the values associated which each thing are the keyStorePassword which I think is the password
#to access the actural storeFile (see storeFile) and then the keyPassword / keyAlias is the store
#keystore name and password
#4.) The actual keyStore is some .jks file that can be stored anywhere. And in order to build
#one you follow:
#https://developer.android.com/studio/publish/app-signing.html#sign-apk
#and then notice in step 5 how it says press cancel and it just create a jks file and doesn't
#do al lthe signing for you since we have everything in the gradle file and we can just do:
#Build->Build APK and then it will handle itself
#Also, the storeFile: is a relative path so storefile=keystore/FoodOnMyMind.jks means
#Some/Parent/Path/onComputer/FoodOnMyMind/app/keystore/FoodOnMyMind.jks...so just need to put the jks
#file that I create via (4) in that location.

#note: the benefit of doing the way I have is when you create a signingconfig using androidStudio
#it puts all the signing info (like storePassword , keyPassword etc..) in plain text in the
#build gradle file so seperating it and putting everything into keystore.properties file makes
#it harder to be accessed which is good when working on shared / open sourced code